//! SeaORM Entity. Generated by sea-orm-codegen 0.7.0

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "users"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel, Serialize, Deserialize)]
pub struct Model {
    pub id: Uuid,
    pub display_name: String,
    pub full_name: Option<String>,
    pub created_at: DateTimeWithTimeZone,
    pub modified_at: DateTimeWithTimeZone,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    DisplayName,
    FullName,
    CreatedAt,
    ModifiedAt,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = Uuid;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Messages,
    Emojis,
    Reactions,
    Ethaddresses,
}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::Uuid.def(),
            Self::DisplayName => ColumnType::String(Some(128u32)).def(),
            Self::FullName => ColumnType::String(Some(128u32)).def().null(),
            Self::CreatedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::ModifiedAt => ColumnType::TimestampWithTimeZone.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Messages => Entity::has_many(super::messages::Entity).into(),
            Self::Emojis => Entity::has_many(super::emojis::Entity).into(),
            Self::Reactions => Entity::has_many(super::reactions::Entity).into(),
            Self::Ethaddresses => Entity::has_many(super::ethaddresses::Entity).into(),
        }
    }
}

impl Related<super::messages::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Messages.def()
    }
}

impl Related<super::emojis::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Emojis.def()
    }
}

impl Related<super::reactions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Reactions.def()
    }
}

impl Related<super::ethaddresses::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ethaddresses.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
